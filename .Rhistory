abline(v = women.rewire[1, 4], lty = 2)
author.edgelist <- function(data) {
au <- unique(lapply(authors(data), function(vec) {
if(length(vec) == 1) c() else combn(vec, m = 2)
}))
if(is.null(au)) return(matrix('', nr = 0, nc = 2))
return(as.data.frame(t(matrix(au, nr = 2)), stringsAsFactors = FALSE))
}
load('~/Documents/VBI/R/calc/examples.RData')
load('~/Documents/VBI/R/calc/tmtc/examples.RData')
source('~/Documents/programming/github/resources/igraph-cory.R')
excl.transitivity(women)
excl.transitivity(women,type='b')
et <- excl.transitivity(women,type='b')
sum(et$T)/sum(et$V)
et$T/et$V
transitivity
?transitivity
transitivity(onemode.projection(women), type = 'local')
transitivity(onemode.projection(women), type = 'local') * choose(degree(women), 2)
choose(degree(women), 2)
transitivity(onemode.projection(women), type = 'local') * choose(degree(onemode.projection(women)), 2)
opsahl.transitivity(women)
opsahl.transitivity(women,type='both')
opsahl.transitivity(women,type='local')
rewire.bipartite.transitivity <- function(bigraph, n, rounds = 2, type) {
stopifnot(type %in% c('local', 'global', 'both'))
if(type == 'global') {
tc <- twomode.triad.census(bigraph)
df <- data.frame(C = tc2C(tc), C.O = tc2CO(tc),
C.N = tc2Cin(tc), C.X = tc2Cex(tc))
} else {
graph <- onemode.projection(bigraph)
vts <- list(
C = data.frame(
V = choose(degree(graph), 2),
T = transitivity(graph, type = 'local') *
choose(degree(graph), 2)),
CO = opsahl.transitivity(bigraph, type = 'both'),
CN = incl.transitivity(bigraph, type = 'both'),
CX = excl.transitivity(bigraph, type = 'both'))
dfs <- c(
list('global' = data.frame(C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V))),
lapply(1:vcount(graph), function(v) {
data.frame(C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v])
}))
}
g <- bigraph
for(i in 1:n) {
g <- rewire.edges.bipartite(g, rounds = rounds)
if(type == 'global') {
tc <- twomode.triad.census(g)
df <- rbind(df, c(tc2C(tc), tc2CO(tc), tc2Cin(tc), tc2Cex(tc)))
} else {
h <- onemode.projection(g)
vts <- list(
C = data.frame(
V = choose(degree(h), 2),
T = transitivity(h, type = 'local') *
choose(degree(h), 2)),
CO = opsahl.transitivity(g, type = 'both'),
CN = incl.transitivity(g, type = 'both'),
CX = excl.transitivity(g, type = 'both'))
dfs <- c(
list('global' = rbind(dfs$global, data.frame(
C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V)))),
lapply(1:vcount(graph), function(v) {
rbind(dfs[[v]], data.frame(
C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v]))
}))
}
}
return(if(type == 'global') df else dfs)
}
rewire.bipartite.transitivity(women,5,type='global')
# FUNCTION: Rewire edge list, preserving the degree of all involved
rewire.edges.bipartite <- function(bigraph, rounds = 2) {
el <- get.edgelist(bigraph, names = FALSE)
# Type 0 on left, type 1 on right
rev <- which(V(bigraph)$type[el[, 1]] != 0)
el[rev, ] <- el[rev, 2:1]
deg <- degree(bigraph) # will not change
for(r in 1:rounds) for(i in sample(1:dim(el)[1])) {
# Skip with some probability
#if(rbinom(1, 1, .2)) next()
# Same degree, not same edge, avoid multiedges
same.tail <- which(el[, 1] == el[i, 1])
redundant.head <- which(el[, 2] %in% unique(el[same.tail, 2]))
same.head <- which(el[, 2] == el[i, 2])
redundant.tail <- which(el[, 1] %in% unique(el[same.head, 1]))
es <- setdiff(which(deg[el[, 1]] == deg[el[i, 1]] &
deg[el[, 2]] == deg[el[i, 2]]),
c(redundant.head, redundant.tail))
if(length(es) == 0) next() else {
j <- sample(es, 1) # all have same degree, so no bias due to reps
el[c(i, j), 2] <- el[c(j, i), 2]
}
}
g <- graph.edgelist(el, directed = FALSE)
V(g)$type <- V(bigraph)$type
return(g)
}
rewire.bipartite.transitivity <- function(bigraph, n, rounds = 2, type) {
stopifnot(type %in% c('local', 'global', 'both'))
if(type == 'global') {
tc <- twomode.triad.census(bigraph)
df <- data.frame(C = tc2C(tc), C.O = tc2CO(tc),
C.N = tc2Cin(tc), C.X = tc2Cex(tc))
} else {
graph <- onemode.projection(bigraph)
vts <- list(
C = data.frame(
V = choose(degree(graph), 2),
T = transitivity(graph, type = 'local') *
choose(degree(graph), 2)),
CO = opsahl.transitivity(bigraph, type = 'both'),
CN = incl.transitivity(bigraph, type = 'both'),
CX = excl.transitivity(bigraph, type = 'both'))
dfs <- c(
list('global' = data.frame(C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V))),
lapply(1:vcount(graph), function(v) {
data.frame(C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v])
}))
}
g <- bigraph
for(i in 1:n) {
g <- rewire.edges.bipartite(g, rounds = rounds)
if(type == 'global') {
tc <- twomode.triad.census(g)
df <- rbind(df, c(tc2C(tc), tc2CO(tc), tc2Cin(tc), tc2Cex(tc)))
} else {
h <- onemode.projection(g)
vts <- list(
C = data.frame(
V = choose(degree(h), 2),
T = transitivity(h, type = 'local') *
choose(degree(h), 2)),
CO = opsahl.transitivity(g, type = 'both'),
CN = incl.transitivity(g, type = 'both'),
CX = excl.transitivity(g, type = 'both'))
dfs <- c(
list('global' = rbind(dfs$global, data.frame(
C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V)))),
lapply(1:vcount(graph), function(v) {
rbind(dfs[[v]], data.frame(
C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v]))
}))
}
}
return(if(type == 'global') df else dfs)
}
rewire.bipartite.transitivity(women,5,type='global')
rewire.bipartite.transitivity(women,5,type='both')
# FUNCTION: Evaluate clustering coefficients at several rewirings
rewire.bipartite.transitivity <- function(bigraph, n, rounds = 2, type) {
stopifnot(type %in% c('local', 'global', 'both'))
if(type == 'global') {
tc <- twomode.triad.census(bigraph)
df <- data.frame(C = tc2C(tc), C.O = tc2CO(tc),
C.N = tc2Cin(tc), C.X = tc2Cex(tc))
} else {
graph <- onemode.projection(bigraph)
vts <- list(
C = data.frame(
V = choose(degree(graph), 2),
T = transitivity(graph, type = 'local') *
choose(degree(graph), 2)),
CO = opsahl.transitivity(bigraph, type = 'both'),
CN = incl.transitivity(bigraph, type = 'both'),
CX = excl.transitivity(bigraph, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
data.frame(C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v])
}),
list('global' = data.frame(C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V))))
}
g <- bigraph
for(i in 1:n) {
g <- rewire.edges.bipartite(g, rounds = rounds)
if(type == 'global') {
tc <- twomode.triad.census(g)
df <- rbind(df, c(tc2C(tc), tc2CO(tc), tc2Cin(tc), tc2Cex(tc)))
} else {
h <- onemode.projection(g)
vts <- list(
C = data.frame(
V = choose(degree(h), 2),
T = transitivity(h, type = 'local') *
choose(degree(h), 2)),
CO = opsahl.transitivity(g, type = 'both'),
CN = incl.transitivity(g, type = 'both'),
CX = excl.transitivity(g, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
rbind(dfs[[v]], data.frame(
C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v]))
}),
list('global' = rbind(dfs$global, data.frame(
C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V)))))
}
}
return(if(type == 'global') df else dfs)
}
rewire.bipartite.transitivity(women,5,type='both')
rewire.bipartite.transitivity(women,5,type='both')
rewire.bipartite.transitivity(women,5,type='both')
N <- 24
example.rewire <- list()
rewire.bipartite.transitivity <- function(bigraph, n, rounds = 2, type = '') {
stopifnot(type %in% c('local', 'global', 'both'))
if(type == 'global') {
tc <- twomode.triad.census(bigraph)
df <- data.frame(C = tc2C(tc), C.O = tc2CO(tc),
C.N = tc2Cin(tc), C.X = tc2Cex(tc))
} else {
graph <- onemode.projection(bigraph)
vts <- list(
C = data.frame(
V = choose(degree(graph), 2),
T = transitivity(graph, type = 'local') *
choose(degree(graph), 2)),
CO = opsahl.transitivity(bigraph, type = 'both'),
CN = incl.transitivity(bigraph, type = 'both'),
CX = excl.transitivity(bigraph, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
data.frame(C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v])
}),
list('global' = data.frame(C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V))))
}
g <- bigraph
for(i in 1:n) {
g <- rewire.edges.bipartite(g, rounds = rounds)
if(type == 'global') {
tc <- twomode.triad.census(g)
df <- rbind(df, c(tc2C(tc), tc2CO(tc), tc2Cin(tc), tc2Cex(tc)))
} else {
h <- onemode.projection(g)
vts <- list(
C = data.frame(
V = choose(degree(h), 2),
T = transitivity(h, type = 'local') *
choose(degree(h), 2)),
CO = opsahl.transitivity(g, type = 'both'),
CN = incl.transitivity(g, type = 'both'),
CX = excl.transitivity(g, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
rbind(dfs[[v]], data.frame(
C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v]))
}),
list('global' = rbind(dfs$global, data.frame(
C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V)))))
}
}
return(if(type == 'global') df else dfs)
}
example.rewire <- c(
example.rewire, list(women = rewire.bipartite.transitivity(women, n = N)))
# FUNCTION: Evaluate clustering coefficients at several rewirings
rewire.bipartite.transitivity <- function(bigraph, n, rounds = 2, type = '') {
stopifnot(type %in% c('local', 'global', 'both', ''))
if(type == 'global') {
tc <- twomode.triad.census(bigraph)
df <- data.frame(C = tc2C(tc), C.O = tc2CO(tc),
C.N = tc2Cin(tc), C.X = tc2Cex(tc))
} else {
graph <- onemode.projection(bigraph)
vts <- list(
C = data.frame(
V = choose(degree(graph), 2),
T = transitivity(graph, type = 'local') *
choose(degree(graph), 2)),
CO = opsahl.transitivity(bigraph, type = 'both'),
CN = incl.transitivity(bigraph, type = 'both'),
CX = excl.transitivity(bigraph, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
data.frame(C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v])
}),
list('global' = data.frame(C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V))))
}
g <- bigraph
for(i in 1:n) {
g <- rewire.edges.bipartite(g, rounds = rounds)
if(type == 'global') {
tc <- twomode.triad.census(g)
df <- rbind(df, c(tc2C(tc), tc2CO(tc), tc2Cin(tc), tc2Cex(tc)))
} else {
h <- onemode.projection(g)
vts <- list(
C = data.frame(
V = choose(degree(h), 2),
T = transitivity(h, type = 'local') *
choose(degree(h), 2)),
CO = opsahl.transitivity(g, type = 'both'),
CN = incl.transitivity(g, type = 'both'),
CX = excl.transitivity(g, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
rbind(dfs[[v]], data.frame(
C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v]))
}),
list('global' = rbind(dfs$global, data.frame(
C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V)))))
}
}
return(if(type == 'global') df else dfs)
}
example.rewire <- list()
N <- 24
example.rewire <- c(
example.rewire, list(women = rewire.bipartite.transitivity(women, n = N)))
example.rewire
?zscore
load('~/Documents/VBI/R/calc/tmtc/win3setc.RData')
win3setc[[1]][5]
props <- lapply(win3setc, function(tc) tc / sum(tc))
Z.prop <- lapply(1:(length(props) - 1), function(i) {
(props[[i + 1]] - props[[i]]) / props[[i]]
})
years <- seq(1987, 2008, 3)
years
prop <- lapply(win3setc, function(tc) tc / sum(tc))
z.prop <- lapply(1:(length(prop) - 1), function(i) {
(prop[[i + 1]] - prop[[i]]) / prop[[i]]
})
plot(x = c(), y = c(), xlim = years, ylim = range(Z.prop))
plot(x = c(), y = c(), xlim = range(years), ylim = range(Z.prop))
for(i in 1:length(z.prop)) points(x = years, y = as.vector(mat),
pch = pchs[i], col = cols[i])
for(i in 1:length(z.prop)) points(x = years, y = as.vector(z.prop[[i]]),
pch = pchs[i], col = cols[i])
pchs <- 1:8
cols <- rainbow(8)
for(i in 1:length(z.prop)) points(x = years, y = as.vector(z.prop[[i]]),
pch = pchs[i], col = cols[i])
for(i in 1:length(z.prop)) points(x = years, y = as.vector(z.prop[[i]]),
type = 'o', pch = pchs[i], col = cols[i])
plot(x = c(), y = c(), xlim = range(years), ylim = range(Z.prop))
for(i in 1:8) points(
x = years, y = sapply(z.prop, function(mat) mat[i]),
type = 'o', pch = pchs[i], col = cols[i])
years <- seq(1990, 2008, 3)
pchs <- 1:7
cols <- rainbow(7)
for(i in 1:8) points(
x = years, y = sapply(z.prop, function(mat) mat[i]),
type = 'o', pch = pchs[i], col = cols[i])
years <- seq(1987, 2008, 3)
pchs <- 1:8
cols <- rainbow(8)
plot(x = c(), y = c(), xlim = range(years), ylim = range(win3setc), log = 'y')
for(i in 1:8) points(
x = years, y = sapply(win3setc, function(mat) mat[i]),
type = 'o', pch = pchs[i], col = cols[i])
load('~/Documents/VBI/R/calc/tmtc/win3Cexw.RData')
win3Cexw[[1]]
library(data.table)
load('~/Documents/VBI/R/calc/tmtc/examples-ensemble.RData')
length(example.ensemble)
rm(list=ls())
library(igraph)
ergm
library(ergm)
install_github('corybrunson/bitriad')
require(devtools)
install_github('corybrunson/bitriad')
require(bitriad)
data(example)
data(FH)
data(F)
data(fischer)
data(fischer.whigs)
data(fischer.han.whigs)
data(ddgg.group)
g1 <- ddgg.group
h1 <- onemode.projection(g1)
g2 <- fischer.han.whigs
h2 <- onemode.projection(g2)
density(h1)
ecount(h1)/choose(vcount(h1),2)
ecount(h2)/choose(vcount(h2),2)
data(galaskiewicz.urban.grants)
h3 <- galaskiewicz.urban.grants
ecount(h3)/choose(vcount(h3),2)
excl.transitivity(h3)
excl.transitivity(h2)
transitivity(h2)
transitivity(h3)
V(h3)
transitivity(h1)
data(barnes.burkett.corporate)
h4 <- onemode.projection(barnes.burkett.corporate)
ecount(h4)/choose(vcount(h4),2)
transitivity(h4)
data(noordin.top.meetings)
data(nordin.top.meetings)
data(nordin.top.organizations)
h5 <- onemode.projection(nordin.top.meetings)
h6 <- onemode.projection(nordin.top.organizations)
sapply(c(h5,h6),function(h) c(ecount(h)/choose(vcount(h),2),transitivity(h),excl.transitivity(h)))
sapply(list(h5,h6),function(h) c(ecount(h)/choose(vcount(h),2),transitivity(h)))
g5<-nordin.top.meetings
g6<-nordin.top.organizations
excl.transitivity(g5)
excl.transitivity(g6)
require(bitriad)
data(ddgg.group)
ddgg.group
degree(ddgg.group)[V(ddgg.group)$type]
degree(ddgg.group)[!V(ddgg.group)$type]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
sum(x-mean(x))
sum((x-mean(x))^2)
sum((x-.57^2)
)
sum((x-.57)^2)
sum((x-mean(x))^2)
sum((x-.58)^2)
install.packages('RWordPress', repos = 'http://www.omegahat.org/R', type = 'source')
library(RWordPress)
x = 1:5 + rnorm(5, 0, .5)
y = seq(2, 10, 2) + rnorm(5, 0, 1
)
plot(x,y)
data.frame(x = x, y = y)
fit <- lm(y ~ x)
plot(fit)
plot(x,y)
abline(fit)
abline(x = c(1, 5), y = c(2, 10))
?abline
abline(x = c(1, 2), y = c(5, 10))
abline(a = 0, b = 2)
library(scottish.capital)
library(devtools)
install_github('corybrunson/scottish.capital')
getwd()
setwd('Documents/VBI/pkg/bitriad')
setwd('~/Documents/VBI/pkg/scottish.capital')
lines <- readLines('scotland/Scotland.paj')
lines[1:3]
which(grep('^\\*',liness))
which(grep('^\\*',lines))
lines[[176]]
?readLines
which(grep('^\\*',substr(lines, 1, 1)))
grep('^\\*',substr(lines, 1, 1))
lines[grep('^\\*',substr(lines, 1, 1))]
rm(list=ls())
