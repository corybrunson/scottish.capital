rewire.bipartite.transitivity(women,5,type='both')
N <- 24
example.rewire <- list()
rewire.bipartite.transitivity <- function(bigraph, n, rounds = 2, type = '') {
stopifnot(type %in% c('local', 'global', 'both'))
if(type == 'global') {
tc <- twomode.triad.census(bigraph)
df <- data.frame(C = tc2C(tc), C.O = tc2CO(tc),
C.N = tc2Cin(tc), C.X = tc2Cex(tc))
} else {
graph <- onemode.projection(bigraph)
vts <- list(
C = data.frame(
V = choose(degree(graph), 2),
T = transitivity(graph, type = 'local') *
choose(degree(graph), 2)),
CO = opsahl.transitivity(bigraph, type = 'both'),
CN = incl.transitivity(bigraph, type = 'both'),
CX = excl.transitivity(bigraph, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
data.frame(C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v])
}),
list('global' = data.frame(C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V))))
}
g <- bigraph
for(i in 1:n) {
g <- rewire.edges.bipartite(g, rounds = rounds)
if(type == 'global') {
tc <- twomode.triad.census(g)
df <- rbind(df, c(tc2C(tc), tc2CO(tc), tc2Cin(tc), tc2Cex(tc)))
} else {
h <- onemode.projection(g)
vts <- list(
C = data.frame(
V = choose(degree(h), 2),
T = transitivity(h, type = 'local') *
choose(degree(h), 2)),
CO = opsahl.transitivity(g, type = 'both'),
CN = incl.transitivity(g, type = 'both'),
CX = excl.transitivity(g, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
rbind(dfs[[v]], data.frame(
C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v]))
}),
list('global' = rbind(dfs$global, data.frame(
C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V)))))
}
}
return(if(type == 'global') df else dfs)
}
example.rewire <- c(
example.rewire, list(women = rewire.bipartite.transitivity(women, n = N)))
# FUNCTION: Evaluate clustering coefficients at several rewirings
rewire.bipartite.transitivity <- function(bigraph, n, rounds = 2, type = '') {
stopifnot(type %in% c('local', 'global', 'both', ''))
if(type == 'global') {
tc <- twomode.triad.census(bigraph)
df <- data.frame(C = tc2C(tc), C.O = tc2CO(tc),
C.N = tc2Cin(tc), C.X = tc2Cex(tc))
} else {
graph <- onemode.projection(bigraph)
vts <- list(
C = data.frame(
V = choose(degree(graph), 2),
T = transitivity(graph, type = 'local') *
choose(degree(graph), 2)),
CO = opsahl.transitivity(bigraph, type = 'both'),
CN = incl.transitivity(bigraph, type = 'both'),
CX = excl.transitivity(bigraph, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
data.frame(C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v])
}),
list('global' = data.frame(C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V))))
}
g <- bigraph
for(i in 1:n) {
g <- rewire.edges.bipartite(g, rounds = rounds)
if(type == 'global') {
tc <- twomode.triad.census(g)
df <- rbind(df, c(tc2C(tc), tc2CO(tc), tc2Cin(tc), tc2Cex(tc)))
} else {
h <- onemode.projection(g)
vts <- list(
C = data.frame(
V = choose(degree(h), 2),
T = transitivity(h, type = 'local') *
choose(degree(h), 2)),
CO = opsahl.transitivity(g, type = 'both'),
CN = incl.transitivity(g, type = 'both'),
CX = excl.transitivity(g, type = 'both'))
dfs <- c(
lapply(1:vcount(graph), function(v) {
rbind(dfs[[v]], data.frame(
C = vts[[1]]$T[v] / vts[[1]]$V[v],
CO = vts[[2]]$T[v] / vts[[2]]$V[v],
CN = vts[[3]]$T[v] / vts[[3]]$V[v],
CX = vts[[4]]$T[v] / vts[[4]]$V[v]))
}),
list('global' = rbind(dfs$global, data.frame(
C = sum(vts[[1]]$T) / sum(vts[[1]]$V),
CO = sum(vts[[2]]$T) / sum(vts[[2]]$V),
CN = sum(vts[[3]]$T) / sum(vts[[3]]$V),
CX = sum(vts[[4]]$T) / sum(vts[[4]]$V)))))
}
}
return(if(type == 'global') df else dfs)
}
example.rewire <- list()
N <- 24
example.rewire <- c(
example.rewire, list(women = rewire.bipartite.transitivity(women, n = N)))
example.rewire
?zscore
load('~/Documents/VBI/R/calc/tmtc/win3setc.RData')
win3setc[[1]][5]
props <- lapply(win3setc, function(tc) tc / sum(tc))
Z.prop <- lapply(1:(length(props) - 1), function(i) {
(props[[i + 1]] - props[[i]]) / props[[i]]
})
years <- seq(1987, 2008, 3)
years
prop <- lapply(win3setc, function(tc) tc / sum(tc))
z.prop <- lapply(1:(length(prop) - 1), function(i) {
(prop[[i + 1]] - prop[[i]]) / prop[[i]]
})
plot(x = c(), y = c(), xlim = years, ylim = range(Z.prop))
plot(x = c(), y = c(), xlim = range(years), ylim = range(Z.prop))
for(i in 1:length(z.prop)) points(x = years, y = as.vector(mat),
pch = pchs[i], col = cols[i])
for(i in 1:length(z.prop)) points(x = years, y = as.vector(z.prop[[i]]),
pch = pchs[i], col = cols[i])
pchs <- 1:8
cols <- rainbow(8)
for(i in 1:length(z.prop)) points(x = years, y = as.vector(z.prop[[i]]),
pch = pchs[i], col = cols[i])
for(i in 1:length(z.prop)) points(x = years, y = as.vector(z.prop[[i]]),
type = 'o', pch = pchs[i], col = cols[i])
plot(x = c(), y = c(), xlim = range(years), ylim = range(Z.prop))
for(i in 1:8) points(
x = years, y = sapply(z.prop, function(mat) mat[i]),
type = 'o', pch = pchs[i], col = cols[i])
years <- seq(1990, 2008, 3)
pchs <- 1:7
cols <- rainbow(7)
for(i in 1:8) points(
x = years, y = sapply(z.prop, function(mat) mat[i]),
type = 'o', pch = pchs[i], col = cols[i])
years <- seq(1987, 2008, 3)
pchs <- 1:8
cols <- rainbow(8)
plot(x = c(), y = c(), xlim = range(years), ylim = range(win3setc), log = 'y')
for(i in 1:8) points(
x = years, y = sapply(win3setc, function(mat) mat[i]),
type = 'o', pch = pchs[i], col = cols[i])
load('~/Documents/VBI/R/calc/tmtc/win3Cexw.RData')
win3Cexw[[1]]
library(data.table)
load('~/Documents/VBI/R/calc/tmtc/examples-ensemble.RData')
length(example.ensemble)
rm(list=ls())
library(igraph)
ergm
library(ergm)
install_github('corybrunson/bitriad')
require(devtools)
install_github('corybrunson/bitriad')
require(bitriad)
data(example)
data(FH)
data(F)
data(fischer)
data(fischer.whigs)
data(fischer.han.whigs)
data(ddgg.group)
g1 <- ddgg.group
h1 <- onemode.projection(g1)
g2 <- fischer.han.whigs
h2 <- onemode.projection(g2)
density(h1)
ecount(h1)/choose(vcount(h1),2)
ecount(h2)/choose(vcount(h2),2)
data(galaskiewicz.urban.grants)
h3 <- galaskiewicz.urban.grants
ecount(h3)/choose(vcount(h3),2)
excl.transitivity(h3)
excl.transitivity(h2)
transitivity(h2)
transitivity(h3)
V(h3)
transitivity(h1)
data(barnes.burkett.corporate)
h4 <- onemode.projection(barnes.burkett.corporate)
ecount(h4)/choose(vcount(h4),2)
transitivity(h4)
data(noordin.top.meetings)
data(nordin.top.meetings)
data(nordin.top.organizations)
h5 <- onemode.projection(nordin.top.meetings)
h6 <- onemode.projection(nordin.top.organizations)
sapply(c(h5,h6),function(h) c(ecount(h)/choose(vcount(h),2),transitivity(h),excl.transitivity(h)))
sapply(list(h5,h6),function(h) c(ecount(h)/choose(vcount(h),2),transitivity(h)))
g5<-nordin.top.meetings
g6<-nordin.top.organizations
excl.transitivity(g5)
excl.transitivity(g6)
require(bitriad)
data(ddgg.group)
ddgg.group
degree(ddgg.group)[V(ddgg.group)$type]
degree(ddgg.group)[!V(ddgg.group)$type]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
sum(x-mean(x))
sum((x-mean(x))^2)
sum((x-.57^2)
)
sum((x-.57)^2)
sum((x-mean(x))^2)
sum((x-.58)^2)
install.packages('RWordPress', repos = 'http://www.omegahat.org/R', type = 'source')
library(RWordPress)
x = 1:5 + rnorm(5, 0, .5)
y = seq(2, 10, 2) + rnorm(5, 0, 1
)
plot(x,y)
data.frame(x = x, y = y)
fit <- lm(y ~ x)
plot(fit)
plot(x,y)
abline(fit)
abline(x = c(1, 5), y = c(2, 10))
?abline
abline(x = c(1, 2), y = c(5, 10))
abline(a = 0, b = 2)
library(scottish.capital)
library(devtools)
install_github('corybrunson/scottish.capital')
getwd()
setwd('Documents/VBI/pkg/bitriad')
setwd('~/Documents/VBI/pkg/scottish.capital')
lines <- readLines('scotland/Scotland.paj')
lines[1:3]
which(grep('^\\*',liness))
which(grep('^\\*',lines))
lines[[176]]
?readLines
which(grep('^\\*',substr(lines, 1, 1)))
grep('^\\*',substr(lines, 1, 1))
lines[grep('^\\*',substr(lines, 1, 1))]
rm(list=ls())
source('scripts/read.scottish.capital.R')
source('scripts/clean.scottish.capital.R')
source('scripts/test.scottish.capital.R')
library(igraph)
if(!grepl('scottish.capital$', getwd())) stop('Wrong directory')
years <- c(1905, 1921, 1938, 1956, 1974)
scottish.capital <- lapply(years, function(year) {
# Identify the file
file = paste0('scotland/Scotland',
as.numeric(year) - 1, '-', substr(year, 4, 4),
'.txt')
# Identify the lines that demarcate the sections, and save their names
lines <- readLines(file)
secs <- grep('^Section', lines)
Section <- gsub('^Section [A-Z]: | Companies$', '', lines[secs])
# Read table for each section
tabs <- lapply(1:length(secs), function(i) {
read.table(
file, header = TRUE, sep = '|', quote = '',
nrows = if(i == length(secs)) -1 else secs[i + 1] - secs[i] - 2,
skip = secs[i]
)
})
# Save company name and capital columns
Company <- do.call(c, lapply(tabs, function(tab) as.character(tab$Company)))
Capital <- do.call(c, lapply(tabs, function(tab) {
as.numeric(tab[, grep('1000', names(tab))])
}))
# Make list of director vectors
datDirectors <- do.call(c, lapply(tabs, function(tab) {
directors <- gsub(' \\(([A-Z]| |\\&|,)+\\)', '', tab$Multiple.Directors)
strsplit(directors, split = ', ')
}))
Directors <- unique(unlist(datDirectors))
# Named actor and event vectors
actors <- 1:length(Directors)
names(actors) <- Directors
events <- 1:length(Company) + length(actors)
names(events) <- Company
# Edge list
edgelist <- unname(cbind(
actors[unlist(datDirectors)],
rep(events, sapply(datDirectors, length))
))
# Affiliation network! (actors first)
an <- graph.edgelist(edgelist, directed = FALSE)
V(an)$name <- c(names(actors), names(events))
V(an)$type <- c(rep(FALSE, length(actors)), rep(TRUE, length(events)))
V(an)$sector[V(an)$type] <-
rep(Section, c(secs[-1], length(lines) + 1) - secs - 2)
V(an)$capital[V(an)$type] <- Capital
an
})
save(list = 'scottish.capital', file = 'data/scottish.capital.rda')
rm(list = ls())
library(igraph)
load('data/scottish.capital.rda')
# Vector of company names
companies <- unlist(sapply(scottish.capital,
function(g) V(g)$name[V(g)$type]))
length(unique(companies))
# Convert " and " to " & "
companies <- gsub(' and ', ' & ', companies)
length(unique(companies))
companies <- gsub('William', 'Wm', companies)
length(unique(companies))
# Changed names
wh.rep <- grep('\\(formerly', companies)
name.dat <- unique(data.frame(
old = I(gsub('^.* \\(formerly (.*)\\)$', '\\1', companies[wh.rep])),
new = I(gsub('^(.*) \\(formerly .*\\)$', '\\1', companies[wh.rep]))
))
# Where else do the original names appear?
wh.old <- lapply(1:nrow(name.dat), function(i) {
setdiff(grep(name.dat$old[i], companies), wh.rep)
})
# Where else do the changed names appear?
wh.new <- lapply(1:nrow(name.dat), function(i) {
grep(name.dat$new[i], companies)
})
# Replace all instances with changed names
for(i in 1:nrow(name.dat)) {
companies[union(wh.old[[i]], wh.new[[i]])] <- name.dat$new[i]
}
length(unique(companies))
# Combine companies that begin the same way
uniq.companies <- unique(companies)
wh.prefix <- lapply(1:length(uniq.companies), function(i) {
grep(paste0('^', uniq.companies[i]), uniq.companies)
})
wh.prefix <- wh.prefix[which(sapply(wh.prefix, length) > 1)]
prefix.companies <- lapply(wh.prefix, function(vec) uniq.companies[vec])
prefix.tab <- lapply(prefix.companies, function(vec) {
table(companies[which(companies %in% vec)])
})
for(i in 1:length(prefix.tab)) {
name <- names(prefix.tab[[i]])[which(prefix.tab[[i]] ==
max(prefix.tab[[i]]))[1]]
companies[which(companies %in% names(prefix.tab[[i]]))] <- name
}
length(unique(companies))
# Rename event nodes
i <- 1
for(j in 1:length(scottish.capital)) {
wh.event <- which(V(scottish.capital[[j]])$type)
V(scottish.capital[[j]])$name[wh.event] <-
companies[i:(i + length(wh.event) - 1)]
i <- i + length(wh.event)
}
# Vector of director names
directors <- unlist(sapply(scottish.capital,
function(g) V(g)$name[!V(g)$type]))
length(unique(directors))
# Convert " & " to " and "
directors <- gsub(' & ', ' and ', directors)
length(unique(directors))
# Combine directors that begin the same way (BEWARE OF REG EXPR CHARACTERS)
uniq.directors <- unique(directors)
wh.prefix <- lapply(1:length(uniq.directors), function(i) {
grep(paste0('^', uniq.directors[i]), uniq.directors)
})
wh.prefix <- wh.prefix[which(sapply(wh.prefix, length) > 1)]
prefix.directors <- lapply(wh.prefix, function(vec) uniq.directors[vec])
prefix.tab <- lapply(prefix.directors, function(vec) {
table(directors[which(directors %in% vec)])
})
for(i in 1:length(prefix.tab)) {
name <- names(prefix.tab[[i]])[which(prefix.tab[[i]] ==
max(prefix.tab[[i]]))[1]]
directors[which(directors %in% names(prefix.tab[[i]]))] <- name
}
length(unique(directors))
# Presence of an honorific
hons <- c('Sir', 'Maj\\. Gen\\.', 'Col\\.', 'Hon\\.')
for(hon in hons) {
# Determine which names come both with and without the honorific
w.hon <- grep(paste0('^', hon, ' '), directors)
wo.hon <- sub(paste0('^', hon, ' (.*)$'), '\\1', directors[w.hon])
wwo.hon <- wo.hon[which(wo.hon %in% directors)]
# Provided at most one interval is skipped over between appearances,
# replace all instances with the one with the honorific
for(wwo in wwo.hon) {
wh.graph <- which(sapply(scottish.capital, function(g) {
any(grepl(paste0('^(', hon, ' ){0,1}', wwo, '$'),
V(g)$name))
}))
if(length(wh.graph) > 1) {
if(max(diff(wh.graph)) > 2 | max(wh.graph) - min(wh.graph) > 3) next
}
wh.dirs <- which(grepl(paste0('^(', hon, ' ){0,1}', wwo, '$'),
directors))
directors[wh.dirs] <- paste0(hon, ' ', wwo)
}
}
# Manual name equivalences across intervals
equivs <- c(
'^Sir R\\.(W\\.){0,1} Anstruther$',
'^Sir A\\. {0,1}S(\\.|teven) Bilsland$',
'^Sir A\\.(C\\.){0,1} Blair$',
'^(Sir ){0,1}J(as|ames){0,1}. {0,1}(C|I). Campbell$',
'^Sir J(\\.|ohn )T. Cargill$',
'^J(\\.|ohn) Cowan$',
'^H\\.(U\\.){0,1} Cunningham$',
'^Sir Maurice (E\\. ){0,1}Denny$',
'^J\\.(A\\.){0,1} Dewar$',
'^Lord (George|Nigel) Douglas-Hamilton$',
'^R(\\.|alph )(W\\. ){0,1}Dundas$',
'^Sir R(\\.|obert) Erskine-Hill$',
'^R\\.(E\\.){0,1} Findlay$',
'^(R|T)\\.D\\. Findlay$',
'^(Sir ){0,1}H(\\.|ugh) Fraser$',
'^A\\.(B\\.){0,1} Gilroy$',
'^Sir L\\.(G|J)\\. Grant$',
'^Sir G\\.(C\\.){0,1} Harvie-Watt$',
'^(Capt\\. ){0,1}J\\.(F\\.){0,1}H\\. Houldsworth$',
'^B\\.(G|J)\\. Ivory$',
'^H(\\.|enry) Lithgow$',
'^M\\. Ma{0,1}cDougall$',
'^Sir A\\.(F\\.){0,1} McDonald$',
'^Sir J(\\.|ohn) Muir$',
'^Sir H(\\.|ugh) Rose$',
'^R\\.(H|M)\\. Sinclair$',
'^D\\.(J\\.){0,1} Smith$',
'^Sir D(\\.|ouglas) Thomson$',
'^(J|T)\\.W\\. Tod$',
'^Sir Ernest (M\\. ){0,1}Wedderburn$',
'^Sir G(\\.|eorge) Williamson$',
'(B|H)\\.C\\. Wilson$',
'^C\\.F\\.(J\\.){0,1} Younger$',
'^(Sir ){0,1}W(\\.|m )McE\\. Younger$'
)
for(equiv in equivs) {
# Provided no intervals are skipped over between appearances...
wh.graphs <- which(sapply(scottish.capital, function(g) {
any(grep(equiv, V(g)$name))
}))
if(length(wh.graphs) > 1)
if(any(diff(wh.graphs) > 1)) {
print(equiv)
next
}
# ...replace each instance with the most recent version to appear twice,
# or else the most recent
wh <- grep(equiv, directors)
tab <- table(directors[wh])
tw <- names(tab)[which(tab > 1)]
ok <- directors[wh[which(directors[wh] %in% tw)]]
use <- if(length(ok) > 0) ok[length(ok)] else directors[wh[length(wh)]]
directors[wh] <- use
}
length(unique(directors))
# Rename nodes according to renamed directors
i <- 0
sc <- 1
while(i < length(directors)) {
wh <- which(!V(scottish.capital[[sc]])$type)
j <- length(wh)
V(scottish.capital[[sc]])$name[wh] <- directors[(i + 1):(i + j)]
i <- i + j
sc <- sc + 1
}
# Combine nodes with same name
for(i in 1:length(scottish.capital)) {
scottish.capital[[i]] <- contract.vertices(
scottish.capital[[i]],
factor(V(scottish.capital[[i]])$name),
'first'
)
}
# Remove directors that only appear once
for(i in 1:length(scottish.capital)) {
wh <- which(
(!V(scottish.capital[[i]])$type) & (degree(scottish.capital[[i]]) == 1)
)
if(length(wh) == 0) next
print('Deleted directors (appear only once)')
print(c(i, V(scottish.capital[[i]])$name[wh]))
scottish.capital[[i]] <- delete.vertices(scottish.capital[[i]], wh)
}
save(list = 'scottish.capital', file = 'data/scottish.capital.rda')
rm(list = ls())
